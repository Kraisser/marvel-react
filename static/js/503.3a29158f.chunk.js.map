{"version":3,"file":"static/js/503.3a29158f.chunk.js","mappings":"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","sources":["Components/comicsBanner/ComicBanner.js","Components/errorMessage/ErrorMessage.js","Components/pages/SingleContentPage.js","services/MarvelServices.js","hooks/http.hook.js","Components/skeleton/Skeleton.js","utils/setContent.js"],"sourcesContent":["import './comicBanner.css';\r\n\r\nimport avengers from '../../assets/Avengers.png';\r\nimport avengersLogo from '../../assets/Avengers logo.png';\r\n\r\nexport default function ComicBanner() {\r\n\treturn (\r\n\t\t<div className='bannerWrapper'>\r\n\t\t\t<img src={avengers} alt='avengers' />\r\n\t\t\t<div className='bannerHeadersWrapper'>\r\n\t\t\t\t<h3 className='bannerHeader'>New comics Every week!</h3>\r\n\t\t\t\t<h3 className='bannerHeader'>Stay tuned!</h3>\r\n\t\t\t</div>\r\n\t\t\t<img src={avengersLogo} alt='avengersLogo' />\r\n\t\t</div>\r\n\t);\r\n}\r\n","import errorImg from './404Error.png';\r\n\r\nexport default function ErrorMessage() {\r\n\treturn (\r\n\t\t<img\r\n\t\t\tsrc={errorImg}\r\n\t\t\talt='Error'\r\n\t\t\tstyle={{\r\n\t\t\t\twidth: '100%',\r\n\t\t\t}}\r\n\t\t/>\r\n\t);\r\n}\r\n","import './SingleContentPage.css';\r\n\r\nimport {useState, useEffect} from 'react';\r\nimport {useParams, Link} from 'react-router-dom';\r\nimport {Helmet, HelmetProvider} from 'react-helmet-async';\r\n\r\nimport useMarvelService from '../../services/MarvelServices';\r\nimport ComicBanner from '../comicsBanner/ComicBanner';\r\nimport setRenderContent from '../../utils/setContent';\r\n\r\nexport default function SingleContentPage(props) {\r\n\tconst {id} = useParams();\r\n\tconst [content, setContent] = useState(null);\r\n\tconst {getComic, getCharacter, clearErrors, process, setProcess} = useMarvelService();\r\n\tconst contentType = props.type;\r\n\tconst ViewComponent = contentType === 'char' ? ViewChar : ViewComic;\r\n\r\n\tuseEffect(() => {\r\n\t\tswitch (contentType) {\r\n\t\t\tcase 'comic':\r\n\t\t\t\tupdateComic();\r\n\t\t\t\tbreak;\r\n\r\n\t\t\tcase 'char':\r\n\t\t\t\tupdateChar();\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t}, [id]);\r\n\r\n\tconst updateComic = () => {\r\n\t\tclearErrors();\r\n\r\n\t\tgetComic(id)\r\n\t\t\t.then(onLoadContent)\r\n\t\t\t.then(() => setProcess('success'));\r\n\t};\r\n\r\n\tconst updateChar = () => {\r\n\t\tclearErrors();\r\n\r\n\t\tgetCharacter(id)\r\n\t\t\t.then(onLoadContent)\r\n\t\t\t.then(() => setProcess('success'));\r\n\t};\r\n\r\n\tconst onLoadContent = (content) => {\r\n\t\tsetContent(content);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<ComicBanner />\r\n\t\t\t{setRenderContent(process, ViewComponent, content)}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nfunction ViewComic({data}) {\r\n\tconst {thumbnail, title, price, description, pageCount, language} = data;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<HelmetProvider>\r\n\t\t\t\t<Helmet>\r\n\t\t\t\t\t<meta name='description' content={`Marvel comic ${title} info`} />\r\n\t\t\t\t\t<title>{title}</title>\r\n\t\t\t\t</Helmet>\r\n\t\t\t</HelmetProvider>\r\n\r\n\t\t\t<div className='singleContentWrapper'>\r\n\t\t\t\t<img src={thumbnail} alt={title} />\r\n\t\t\t\t<div className='singleContentContainer'>\r\n\t\t\t\t\t<div className='contentDescriptionWrapper'>\r\n\t\t\t\t\t\t<h2>{title}</h2>\r\n\t\t\t\t\t\t<div className='contentInfo'>{description}</div>\r\n\t\t\t\t\t\t<div className='contentInfo'>{pageCount}</div>\r\n\t\t\t\t\t\t<div className='contentInfo'>Language: {language}</div>\r\n\t\t\t\t\t\t<div className='comicPrice marvelColor'>{price}</div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t\t<div className='comicBackLink'>\r\n\t\t\t\t\t\t<Link to='/comics'>Back to All</Link>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nfunction ViewChar({data}) {\r\n\tconst {thumbnail, name, description} = data;\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<HelmetProvider>\r\n\t\t\t\t<Helmet>\r\n\t\t\t\t\t<meta name='description' content={`Marvel character ${name} info`} />\r\n\t\t\t\t\t<title>Character {name} info</title>\r\n\t\t\t\t</Helmet>\r\n\t\t\t</HelmetProvider>\r\n\r\n\t\t\t<div className='singleContentWrapper'>\r\n\t\t\t\t<img src={thumbnail} alt={name} />\r\n\t\t\t\t<div className='contentDescriptionWrapper'>\r\n\t\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t\t<div className='contentInfo'>{description}</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</>\r\n\t);\r\n}\r\n","import {useHttp} from '../hooks/http.hook';\r\n\r\nexport default function useMarvelService() {\r\n\tconst {loading, process, setProcess, request, clearErrors} = useHttp();\r\n\r\n\tconst _baseUrl = 'https://gateway.marvel.com:443/v1/public/';\r\n\tconst _apiBase = 'apikey=36f1abc750cc1a335225f4c72681de4e';\r\n\tconst _charOffset = 0;\r\n\tconst _comicsOffset = 0;\r\n\r\n\tconst setMaxChars = async () => {\r\n\t\tconst maxChars = await request(`${_baseUrl}characters?limit=1&${_apiBase}`);\r\n\r\n\t\treturn maxChars.data.total;\r\n\t};\r\n\r\n\tconst getAllCharacters = async (limit, offset = _charOffset) => {\r\n\t\tlet limilOption;\r\n\r\n\t\tif (limit || +limit || limit > 0 || limit <= 100) {\r\n\t\t\tlimilOption = `limit=${limit}`;\r\n\t\t}\r\n\r\n\t\tconst res = await request(`${_baseUrl}characters?${limilOption}&offset=${offset}&${_apiBase}`);\r\n\r\n\t\treturn res.data.results.map((item) => _transformCharData(item));\r\n\t};\r\n\r\n\tconst getCharacter = async (id) => {\r\n\t\tconst res = await request(`${_baseUrl}characters/${id}?${_apiBase}`);\r\n\r\n\t\treturn _transformCharData(res.data.results[0]);\r\n\t};\r\n\r\n\tconst getCharacterByName = async (name) => {\r\n\t\tconst res = await request(`${_baseUrl}characters?name=${name}&${_apiBase}`);\r\n\t\tconsole.log(res);\r\n\r\n\t\tif (res.data.results[0]) {\r\n\t\t\treturn _transformCharData(res.data.results[0]);\r\n\t\t}\r\n\r\n\t\tthrow new Error(`Character not found`);\r\n\t};\r\n\r\n\tconst getAllComics = async (limit, offset = _comicsOffset) => {\r\n\t\tconst res = await request(\r\n\t\t\t`${_baseUrl}comics?issueNumber=0&offset=${offset}&limit=${limit}&${_apiBase}`\r\n\t\t);\r\n\r\n\t\treturn res.data.results.map((item) => _transformComicsData(item));\r\n\t};\r\n\r\n\tconst getComic = async (id) => {\r\n\t\tconst res = await request(`${_baseUrl}comics/${id}?${_apiBase}`);\r\n\r\n\t\treturn _transformComicsData(res.data.results[0]);\r\n\t};\r\n\r\n\tconst _transformCharData = (char) => {\r\n\t\treturn {\r\n\t\t\tname: char.name,\r\n\t\t\tid: char.id,\r\n\t\t\tdescription: char.description ? char.description : 'No description',\r\n\t\t\tthumbnail: `${char.thumbnail.path}.${char.thumbnail.extension}`,\r\n\t\t\thomepage: char.urls[0].url,\r\n\t\t\twiki: char.urls[1].url,\r\n\t\t\tcomics: char.comics.items,\r\n\t\t};\r\n\t};\r\n\r\n\tconst _transformComicsData = (comics) => {\r\n\t\tconst {id, title, thumbnail, pageCount, description, prices, textObjects} = comics;\r\n\r\n\t\treturn {\r\n\t\t\tid: id,\r\n\t\t\ttitle: title,\r\n\t\t\tthumbnail: `${thumbnail.path}.${thumbnail.extension}`,\r\n\t\t\tpageCount: pageCount ? `${pageCount} pages` : 'No information about pages',\r\n\t\t\tdescription: description ? description : 'No description',\r\n\t\t\tlanguage: textObjects[0] ? textObjects[0].language : `no information`,\r\n\t\t\tprice: prices[0].price ? `${prices[0].price}$` : 'Not available',\r\n\t\t};\r\n\t};\r\n\r\n\treturn {\r\n\t\tloading,\r\n\t\tprocess,\r\n\t\tsetProcess,\r\n\t\tclearErrors,\r\n\t\tsetMaxChars,\r\n\t\tgetAllCharacters,\r\n\t\tgetCharacter,\r\n\t\tgetCharacterByName,\r\n\t\tgetAllComics,\r\n\t\tgetComic,\r\n\t};\r\n}\r\n","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n\tconst [loading, setLoading] = useState(false);\r\n\tconst [process, setProcess] = useState('waiting');\r\n\r\n\tconst request = useCallback(\r\n\t\tasync (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\t\t\tsetLoading(true);\r\n\t\t\tsetProcess('loading');\r\n\r\n\t\t\ttry {\r\n\t\t\t\tconst response = await fetch(url, {method, body, headers});\r\n\r\n\t\t\t\tif (!response.ok) {\r\n\t\t\t\t\tthrow new Error(`Couldnt fetch (${url}), status: ${response.status}`);\r\n\t\t\t\t}\r\n\r\n\t\t\t\tconst data = response.json();\r\n\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\treturn data;\r\n\t\t\t} catch (e) {\r\n\t\t\t\tsetLoading(false);\r\n\t\t\t\tsetProcess('error');\r\n\t\t\t\tthrow e;\r\n\t\t\t}\r\n\t\t},\r\n\t\t[]\r\n\t);\r\n\r\n\tconst clearErrors = useCallback(() => {\r\n\t\tsetProcess('loading');\r\n\t}, []);\r\n\r\n\treturn {loading, process, setProcess, request, clearErrors};\r\n};\r\n","import './skeleton.css';\r\n\r\nexport default function Skeleton(props) {\r\n  return (\r\n    <div className=\"skeletonWrapper\">\r\n      <h3 className=\"skeletonHeader\">Please select a character to see information</h3>\r\n      <div className=\"skeletonContainer\">\r\n        <div className=\"skeletonChar\">\r\n          <div className=\"skeletonRound\"></div>\r\n          <div className=\"skeletonEmptyHeader\"></div>\r\n        </div>\r\n        <div className=\"skeletonComics\"></div>\r\n        <div className=\"skeletonComics\"></div>\r\n        <div className=\"skeletonComics\"></div>\r\n      </div>\r\n    </div>\r\n  )\r\n}","import Skeleton from '../Components/skeleton/Skeleton';\r\nimport Spinner from '../Components/spinner/Spinner';\r\nimport ErrorMessage from '../Components/errorMessage/ErrorMessage';\r\n\r\nexport default function setContent(process, Component, data) {\r\n\tswitch (process) {\r\n\t\tcase 'waiting':\r\n\t\t\treturn <Skeleton />;\r\n\t\tcase 'loading':\r\n\t\t\treturn <Spinner />;\r\n\t\tcase 'success':\r\n\t\t\treturn <Component data={data} />;\r\n\t\tcase 'error':\r\n\t\t\treturn <ErrorMessage />;\r\n\t\tdefault:\r\n\t\t\tthrow new Error(`Unexpected process state`);\r\n\t}\r\n}\r\n"],"names":["ComicBanner","className","src","avengers","alt","avengersLogo","ErrorMessage","errorImg","style","width","SingleContentPage","props","id","useParams","content","setContent","useState","getComic","getCharacter","clearErrors","process","setProcess","useMarvelService","contentType","type","ViewComponent","ViewChar","ViewComic","useEffect","updateComic","updateChar","then","onLoadContent","setRenderContent","data","thumbnail","title","price","description","pageCount","language","name","to","loading","request","setLoading","useCallback","async","url","method","body","headers","response","fetch","ok","Error","status","json","e","useHttp","_baseUrl","_apiBase","_transformCharData","char","path","extension","homepage","urls","wiki","comics","items","_transformComicsData","prices","textObjects","setMaxChars","total","getAllCharacters","limit","limilOption","offset","res","results","map","item","getCharacterByName","console","log","getAllComics","Skeleton","Component","Spinner"],"sourceRoot":""}